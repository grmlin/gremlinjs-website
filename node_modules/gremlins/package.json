{
  "name": "gremlins",
  "version": "0.8.0",
  "description": "A dependency-free library to build Javascript components for all your websites.",
  "main": "dist/gremlins.min.js",
  "keywords": [
    "MutationObserver",
    "components"
  ],
  "author": {
    "name": "Andreas Wehr"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/grmlin/gremlins.git"
  },
  "bugs": {
    "url": "https://github.com/grmlin/gremlins/issues"
  },
  "homepage": "http://grml.in",
  "dependencies": {
    "document-register-element": "^0.2.1",
    "object-assign": "^2.0.0"
  },
  "devDependencies": {
    "babelify": "^5.0.4",
    "browserify": "^9.0.3",
    "gulp": "^3.8.11",
    "gulp-concat": "^2.5.2",
    "gulp-connect": "~0.7.0",
    "gulp-eslint": "^0.7.0",
    "gulp-gzip": "0.0.5",
    "gulp-include": "~0.2.1",
    "gulp-markdox": "^0.1.1",
    "gulp-rename": "~1.0.0",
    "gulp-sizereport": "^1.0.2",
    "gulp-sourcemaps": "^1.5.0",
    "gulp-uglify": "^1.1.0",
    "gulp-util": "^3.0.4",
    "gulp-wrap": "^0.11.0",
    "jshint-stylish": "^1.0.1",
    "through2": "^0.6.3",
    "vinyl-transform": "^1.0.0"
  },
  "readme": "\n![GremlinJS](logo.png)  \n\n\n#GREMLIN.JS\ndead simple web components\n\nGREMLIN.JS is a highly modularized library to build web components. These components are not as fancy as libraries like Polymer, but they're great to build reusable javascript components for boringly normal websites, where your HTML is rendered on the server.  \nThrow in some bundled js, add the corresponding tags to your HTML, and you're good to go.\n\n```javascript\nvar gremlins = require('gremlins');\ngremlins.create({\n  name: 'Slider'\n  initialize: function(){\n    this.initSlider();\n  }\n  // awesome slider magic\n});\n```\n\n```html\n<slider-gremlin>\n  <!-- awesome slider HTML -->\n</slider-gremlin>\n```\n\n## Installation\n[Release Notes](https://github.com/grmlin/gremlinjs/blob/master/release-notes.md)\n\n### npm\n    \n    $ npm install gremlins --save\n    \n### bower\n\n    $ bower install gremlins\n    \n### global\n\n    <script src=\"gremlin.min.js\" />\n    \n    \n\n---\n\n## Creating Components\n\nTo create a new component, you'll have to add new specs for them to GREMLIN.JS\n\nA Spec is a javascript object literal, that later will be used as a prototype for all the components found and intantiated in the page.\n\nEvery component will inherit from `Gremlin`, the base prototype of all components.\n\n-----\n\n### Gremlin\n\n#### mixins\nAn object, or an array of objects, used as mixin(s). This way it's easy to extend you're components capabilities in a modular way.  \nIf you're mixins and componenet use the same method names, they will be decorated and called in the order they were added to the spec.\n\n#### name\n**required** name of this component\n\n#### tagName\noptional tag name. If you omit the `tagName`, the custom element will have the tag `${name}-gremlin`.  \n\nBe aware you have to add a minimum of one hypen! (custom elements work this way).  \n`tagName: responsive-slider` **ok**  \n`tagName: slider` **error**\n\n#### el\nThe dom element for this component. Available inside the `initialize` call\n\n##### initialize() \nconstructor function called for all instances. Can safely be overwritten by the component\n\n#### destroy()\ncalled, when the element leaves the dom. Can be used to unbind event handlers and such\n\n#### create()\nextends the base prototype with a new spec. **Don't overwrite this**, you can't extend from your **new** component anymore if you do so.   \nThis is the method `gremlins.create` calls!\n\n----\n\n### gremlins.create(Spec)\n\nCreate a new spec for components with the name `name` \n\n```js\ngremlins.create({\n  name: 'foo', // required name property\n  tagName: 'foo-bar', // optional tagname used for the custom dom element. Defaults to \" ${name}-gremlin\"\n  initialize: function(){\n  \t// your constructor function called in the context of every dom element found for this spec\n  \tthis.hello();\n  },\n  hello: function(){\n    this.el.querySelector('span').innerHTML = 'hello world!';\n  }\n});\n```\n\n### Using Components\n\n```html\n<foo-bar>\n\t<span></span>\n</foo-bar>\n```\n\nwill be rendered with javascript as\n\n```html\n<foo-bar>\n\t<span>hello world!</span>\n</foo-bar>\n```\n\n\n**GREMLIN.JS**, a dependency-free library to build reusable Javascript components.\n\n\n[**Visit Website**](http://grml.in)\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "8648dbc116cecb1be69ffd4e25974f600c0f1f6a",
  "_id": "gremlins@0.8.0",
  "scripts": {},
  "_shasum": "bc1ce10bc82417dc9ba86782a9badbab9ae9d6f1",
  "_from": "gremlins@"
}
